
#include <a_samp>

#include <a_mysql>
#include <streamer>
#include <Pawn.CMD>
#include <sscanf2>
#include <foreach>
#include <Pawn.Regex>
#include <crashdetect>

#define  SQL_HOST "localhost"
#define  SQL_USER "user40533"
#define  SQL_PASS "4EW1kWMXjK8z"
#define  SQL_BASE "user40533"
#define  SQL_DB  "user40533"

#define SCM SendClientMessage
#define SCMTA SendClientMessageToAll
#define SPD ShowPlayerDialog
#define COLOR_GRAY  		0x999999FF
#define COLOR_WHITE         0xFFFFFFFF
#define COLOR_RED   		0xFF0000FF
#define COLOR_NOTIFICATION  0xFF8C00FF
#define SCMError(%0,%1) SCM(%0, COLOR_RED, %1),PlayerPlaySound(%0, 1085, 0.0, 0.0, 0.0)
#define SCMNotification(%0,%1) SCM(%0, COLOR_NOTIFICATION, %1), PlayerPlaySound(%0, 1083, 0.0, 0.0, 0.0)


main()
{
	print("\n----------------------------------");
	print("-----------NEW PROJECT STARTED----------");
	print("----------------------------------\n");
}

//================================= ?????????? ==================================

//--------------------------------- ??????? ------------------------------------
new MySQL:dbHandle;
new PlayerAFK[MAX_PLAYERS];
new expmultiply = 4;
//fdgdgd
new PlayerText:GraphicPIN_TD[MAX_PLAYERS][4];

enum pInfo
{
   pExp,
   pLevel,
   pOnline,
    pName[MAX_PLAYER_NAME],
        pPassword[65], // SHA-256 ??????? ??? ?? 64 ????????
        pSalt[11]
}

enum player {
	ID,
	NAME[MAX_PLAYER_NAME],
	PASSWORD[65],
	SALT[11],
	EMAIL[65],
	REF,
	SEX,
	RACE,
	AGE,
	SKIN,
	REGDATA[13],
	REGIP[16],
	ADMIN,
	MONEY,
	LVL,
	EXP,
	MINS,
	PIN[2],
	LASTIP[16],
}
new player_info[MAX_PLAYERS][player];
enum dialogs {
	DLG_NONE,
	DLG_REG,
	DLG_REGEMAIL,
	DLG_REF,
	DLG_REGREF,
	DLG_SEX,
	DLG_REGSEX,
	DLG_RACE,
	DLG_REGRACE,
	DLG_REGAGE,
	DLG_LOG,
    DLG_STAT,
	DLG_SECURESETTINGS,
	DLG_NEWPASS1,
	DLG_NEWPASS2,
	DLG_SECRETPINCONTROL,
	DLG_SECRETPINSET,
	DLG_SECRETPINRESET,
    DLG_MAINMENU,
	}

new PlayerRaces[3][] = {"Iaa?ieaiay", "Aa?iiaieaiay", "Iiiaieieaiay/Aceaoneay"};
public OnGameModeInit()
{
	ConnectMySQL();
	SetGameModeText("Foundation RP v0.14");
	SendRconCommand("hostname Foundation  RolePlay by Sweeney");

	LoadTextDraws();
	
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	SetTimer("SecondUpdate", 1000, true);
	SetTimer("MinuteUpdate", 60000, true);
	return 1;
}

stock LoadTextDraws()
{
	#include <TextDraws/GraphicPIN>
}

stock ConnectMySQL()
{
	dbHandle = mysql_connect(SQL_HOST, SQL_USER, SQL_PASS, SQL_BASE);
	switch(mysql_errno())
	{
	case 0: print("Iiaee??aiea e  MySQL oniaoii");
    default: print("MySQL ia ?aaioaao.");
	}
	mysql_log(ERROR | WARNING);
	mysql_set_charset("cp1251");
}

public OnGameModeExit()
{
	return 1;
}

forward MinuteUpdate();
public MinuteUpdate()
{
        foreach(new i:Player)
        {
            if(PlayerAFK[i] < 2)
            {
                        player_info[i][MINS]++;
                        if(player_info[i][MINS] >= 60)
                        {
                            player_info[i][MINS] = 0;
                            PayDay(i);
                        }
                        static const fmt_query[] = "UPDATE `users` SET `mins` = '%d' WHERE `id` = '%d'";
                        new query[sizeof(fmt_query)+(-2+2)+(-2+8)];
                        format(query, sizeof(query), fmt_query, player_info[i][MINS], player_info[i][ID]);
						mysql_query(dbHandle, query, false);
            }
        }
        return 1;
}


stock PayDay(playerid)
{
        SCM(playerid, COLOR_WHITE, "Ca?ieaoa");
        GiveExp(playerid, 1);
}


forward SeconUpdate();
public SecondUpdate()
{
    foreach(new i:Player)
	{
		PlayerAFK[i]++;
		if(PlayerAFK[i] < 2)
		{
			new string[29] = "{FF0000}AFK: ";
			if(PlayerAFK[i] < 60)
			{
				format(string, sizeof(string), "%s%d ???.", string, PlayerAFK[i]);
			}
			else
			{
				new minute = floatround(PlayerAFK[i]/60, floatround_floor);
				new second = PlayerAFK[i] % 60;
				format(string, sizeof(string), "%s%d iei. %d nae.", string, minute, second);
			}
				SetPlayerChatBubble(i, string, -1, 20, 1000);
		}
	}
 	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{

	return 1;
}

public OnPlayerConnect(playerid)
{
 GetPlayerName(playerid, player_info[playerid][NAME], MAX_PLAYER_NAME);
 TogglePlayerSpectating(playerid, 1);

    InterpolateCameraPos(playerid, 1280.6528,-2037.6846,75.6408+5.0, 13.4005,-2087.5444,35.9909, 25000);
	InterpolateCameraLookAt(playerid, 446.5704,-2036.8873,35.9909-5.0, 367.5072,-1855.4072,11.2948, 25000);
	GetPlayerName(playerid, player_info[playerid][NAME], MAX_PLAYER_NAME);
	static const fmt_query[] = "SELECT `password`, `salt`, `pin`, `lastip` FROM `users` WHERE `name` = 's'";
	new query[sizeof(fmt_query)+(-2+MAX_PLAYER_NAME)];
	mysql_format(dbHandle,query, sizeof(query), fmt_query, player_info[playerid][NAME]);
	mysql_tquery(dbHandle, query, "CheckRegistration", "i", playerid);
	
	SetPVarInt(playerid, "WrongPassword", 3);
	return 1;
}

stock LoadPayerTextDraws(playerid)
{
	#include <TextDraws/GraphicPIN>
}

forward CheckRegistration(playerid);
public CheckRegistration(playerid)
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		cache_get_value_name(0, "password", player_info[playerid][PASSWORD], 64);
        cache_get_value_name(0, "salt", player_info[playerid][SALT], 10);
        ShowLogin(playerid);
	}
	else ShowRegistration(playerid);
}

stock ShowLogin(playerid)
{
	new dialog[403+(-2+MAX_PLAYER_NAME)];
	format(dialog, sizeof(dialog),
			"{FFFFFF}Oaa?aaiue {0089f}%s {FFFFFF}, iu ?aae aeaaou aan ia {0089f} Sweeney RolePlay{FFFFFF}\n\
			 Aeeaoio n oaeei ieeii ia ca?aaeno?e?iaai\n\
			 Aey ea?u ia na?aa?a au aie?iu i?ieoe ?aaeno?aoe?\n\n\
			 I?eaoiaeoa nei?iue ia?ieu aey aaoaai aoaouaai aeeaoioa e ia?ieoa \"Aaeaa\"\n\
			 {ff9300}\t Ia?ieu aie?ai auou io 8-ie ai 32-oo neiaieia\n\
			 \t Ia?ieu aie?ai nionoiyou oieuei ec oeo? e eaoeineeo neiaieia e?aiai ?aaeno?a",
			 player_info[playerid] [NAME]
			 );
			 SPD(playerid, DLG_REG, DIALOG_STYLE_INPUT, "{ffd300}?aaeno?aoey{FFFFFF} Aaia ia?iey", dialog, "Aaeaa", "Auoia");
}

stock ShowRegistration(playerid)
{
	new dialog[403+(-2+MAX_PLAYER_NAME)];
 	format(dialog, sizeof(dialog),
			"{FFFFFF}Oaa?aaiue {0089f}%s {FFFFFF}, iu ?aae aeaaou aan ia {0089f} Sweeney RolePlay{FFFFFF}\n\
			 Aeeaoio n oaeei ieeii ia ca?aaeno?e?iaai\n\
			 Aey ea?u ia na?aa?a au aie?iu i?ieoe ?aaeno?aoe?\n\n\
			 I?eaoiaeoa nei?iue ia?ieu aey aaoaai aoaouaai aeeaoioa e ia?ieoa \"Aaeaa\"n\
			 {ffd300}\t•Ia?ieu aie?ai auou io 8-ie ai 32-oo neiaieia\n\
			 \t•Ia?ieu aie?ai ninoiyou oieuei ec ouo? e eaoeineeo neiaieia e?aiai ?aaeno?a",
			 player_info[playerid][NAME]
			 );
			 SPD(playerid, DLG_REG, DIALOG_STYLE_INPUT, "{ffd300}?aaeno?aoey{FFFFFF} Aaia ia?iey", dialog, "Aaeaa", "Auoia");
}

public OnPlayerDisconnect(playerid, reason)
{
if(GetPVarInt(playerid, "logged") != 0)
	{
	GetPlayerIp(playerid, player_info[playerid][LASTIP], 16);
	static const fmt_query[] = "UPDATE `users` SET `mins` = '%d' `lastip = '%e' WHERE `id` = '%d'";
	new query[sizeof(fmt_query)+(-2+2)+(-2+15)+(-2+8)];
	mysql_format(dbHandle, query, sizeof(query), fmt_query, player_info[playerid][MINS], player_info[playerid][LASTIP], player_info[playerid][ID]);
	mysql_tquery(dbHandle, query);
	}
	return 1;
}



public OnPlayerSpawn(playerid)
{   if(GetPVarInt(playerid, "logged") == 0)
	{
		SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Aey ea?u ia na?aa?a au aie?iu aaoi?eciaaouny");
		return Kick(playerid);
	}
	SetPlayerSkin(playerid, player_info[playerid][SKIN]);
	switch(random(3))
	{
		case 0:
		{
			SetPlayerPos(playerid,1255.4739,-1692.7408,19.7344);
			SetPlayerFacingAngle(playerid, 90.0);
		}
		case 1:
		{
			SetPlayerPos(playerid, 1233.1594,-1692.7914,17.4652);
			SetPlayerFacingAngle(playerid, 270.0);
		}
		case 2:
		{
			SetPlayerPos(playerid, 1243.1615,-1692.5842,16.1974);
			SetPlayerFacingAngle(playerid, 180.0);
		}
	}
	SetCameraBehindPlayer(playerid);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(GetPVarInt(playerid, "logged") == 0)
    {
		SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Aey iaienaiey niiauaiee a aoa au aie?iu aaoi?eciaaouny");
		return Kick(playerid);
	}
	new  string[144];
	if(strlen(text) < 113)
	{
	format(string, sizeof(string), "%d", player_info[playerid][NAME], playerid, text);
	ProxDetector(20.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
	SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20, 7500);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 0, 1, 1, 1, 1);
			SetTimerEx("StopChatAnim", 3200, false, "d", playerid);
		}
	}
	else
	{
	SCM(playerid, COLOR_GRAY, "neeoeii aeeiiia niiauaiea");
	return 0;
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
    PlayerAFK[playerid] = 0;
	if(GetPlayerMoney(playerid) != player_info[playerid][MONEY])
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, player_info[playerid][MONEY]);
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
		case DLG_REG:
	{
				if(response)
					{
					if(!strlen(inputtext))
					{
						ShowRegistration(playerid);
						return SCM(playerid, COLOR_RED, "[Ioeaea]{FFFFFF}Aaaaeoa ia?ieu a iiea ie?a e ia?ieoa \"Aaeaa\"");
					}
					if(strlen(inputtext) < 8 || strlen(inputtext) > 32)
					{
						ShowRegistration(playerid);
						return SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Aeeia ia?iey aie?ia auou io 8-ie ai 32-oo neiiaieia");
					}
						new regex:rg_passwordcheck = regex_new("^[a-z-Z0-9 {1,}]$");
						if(regex_check(inputtext, rg_passwordcheck))
					{
					    new salt[11];
					    for(new i; i < 10; i++)
					    {
							salt[i] = random(79) + 47;
						}
						salt[10] = 0;

						strmid(player_info[playerid][SALT], salt, 0, 11, 11);
						printf("%s", player_info[playerid][SALT]);
						SPD(playerid, DLG_REGEMAIL, DIALOG_STYLE_INPUT, "{ff9300}?aaeno?aoey{FFFFFF} Aaia Email",
									"{FFFFFF}Aaaaeoa aao ianoiyuee Email aa?an\n\
									Anee au iioa?yaoa ainooi e aeeaoioo, oi au nii?aoa ainnoaiiaeou aai ?a?ac Email\n\
									Aaaaeoa aai a iiea ie?a e ia?ieoa \"Aaeaa\"",
									"Aaeaa", "");
								}
							else
								{
								ShowRegistration(playerid);
								regex_delete(rg_passwordcheck);
									return SCM(playerid,  COLOR_RED, "[Ioeaea] {FFFFFF}Ia?ieu ii?ao ninoiyou oieuei ec ?enae e eaoeineeo neiaieia e?aiai ?aaeno?a");
								}
								}
							else
							{
								SCM(playerid, COLOR_RED, "Eniieucoeoa \"/q\", ?oiau iieeioou na?aa?");
									return Kick(playerid);
								}
						}
	case DLG_REGEMAIL:
	{
		if(!strlen(inputtext))
		{
		SPD(playerid, DLG_REGEMAIL, DIALOG_STYLE_INPUT, "{ff9300}?aaeno?aoey{FFFFFF}•Aaia Email",
		"{FFFFFF}\t\t\tAaaaeoa aao ianoiyuee Email aa?an\n\
		Anee au iioa?yaoa ainooi e aeeaoioo, oi au nii?aoa ainnoaiiaeou aai ?a?ac Email\n\
		 Aaaaeoa aai a iiea ie?a e ia?ieoa \"Aaeaa\"",
									"Aaeaa", "");
		return SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Aaaaeoa aao Email a iiea ie?a e ia?ieoa \"Aaeaa\"");
		}
		new regex:rg_passwordcheck = regex_new("^[a-zA-Z0-9.-_] {1,43}@[a-zA-Z]{1,12}\\.[a-zA-Z]{1,8}$");
		if(regex_check(inputtext, rg_passwordcheck))
		{
		strmid(player_info[playerid][EMAIL], inputtext, 0 , strlen (inputtext), 64);
		SPD(playerid, DLG_REGREF, DIALOG_STYLE_INPUT, "{ff9300}?aaeno?aoey{FFFFFF}•Aaia i?eaeaneaoaai",
		"{FFFFFF}Anee ou caoae ia na?aa? ii i?eaeaoaie?, oi\n\
  		ii?aou oeacaou iee i?eaeaneaoaai a iiea ie?a:",
		"Aaeaa", "I?iionoeou");
		}
		else
		{
		SPD(playerid, DLG_REGEMAIL, DIALOG_STYLE_INPUT, "{ff9300}?aaeno?aoey{FFFFFF}•Aaia Email",
		"{FFFFFF}\t\t\t Aaaaeoa aao ianoiyuee Email aa?an\n\
		 Anee au iioa?yaoa ainooi e aeeaoioo, oi au nii?aoa ainnoaiiaeou aai ?a?ac Email\n\
		 Aaaaeoa aao a iiea ie?a e ia?ieoa \"Aaeaa\"",
									"Aaeaa", "");
		return SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Oea?eoa i?aaeeuii aao Email aa?an");
		}
}

	case DLG_REGREF:
	{
		if (response)
		{
			static const fmt_query[] = "SELECT * FROM `users` WHERE `name` = '%s'";
			new query[sizeof(fmt_query)+(-2+MAX_PLAYER_NAME)];
			mysql_format(dbHandle,query, sizeof(query), fmt_query, inputtext);
			mysql_tquery(dbHandle, query ,"CheckReferal", "is", playerid, inputtext);
		}
				else
				{
				    SPD(playerid, DLG_REGSEX, DIALOG_STYLE_MSGBOX, "{ff9300}?aaeno?aoey{FFFFFF}•Auai? iiea ia?niia?a",
					"{FFFFFF}Auaa?eoa iie aaoaai ia?niia?a:",
					"?aineee","Io?neie");
				}
			}

	case DLG_REGSEX:
			{
			player_info[playerid][SEX] = response ? (1) : (2);
				SPD(playerid, DLG_REGRACE, DIALOG_STYLE_LIST, "{ff9300}?aaeno?aoey{FFFFFF}•Auai? ?ane ia?niia?a",
				"Iaa?ieaiay\n\
				 Aa?iiaieaiay\n\
				 Iiiaeieaiay/Aceaoneay",
				 "Aaeaa", "");
			}
			case DLG_RACE:
			{
			    player_info[playerid][RACE] = listitem+1;
				SPD(playerid, DLG_REGAGE, DIALOG_STYLE_INPUT, "{ff9300}?aaeno?aoey{FFFFFF}•Auai? aic?anoa ia?niia?a",
				"{FFFFFF}Aaaaeoa aic?ano aaoaai aoaouaai ia?niia?a:\n\
				{ff9300}\tAaaaeoa aic?ano io 18-oe ai 60-oe",
				"Aaeaa", "");
			}
			case DLG_REGAGE:
			{
				if(!strlen(inputtext))
				{
						SPD(playerid, DLG_REGAGE, DIALOG_STYLE_INPUT, "Auai? aic?anoa ia?niia?a",
						"{FFFFFF}Aaaaeoa aaic?ano aaoaai aoaouaai ia?niia?a:\n\
						{ff9300}\tAaaaeoa aic?ano io 18-oe ai 60-oe",
						"Aaeaa", "");
						return SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Aaaaeoa aao aic?ano a iiea ie?a e ia?ieoa \"Aaeaa\"");
				}
			    if(!(18 <= strval(inputtext) <= 60))
				{
							SPD(playerid, DLG_REGAGE, DIALOG_STYLE_INPUT, "{ff9300}?aaeno?aoey{FFFFFF}•Auai? aic?anoa ia?niia?a",
							"{FFFFFF}Aaaaeoa  aic?ano aaoaai aoaouaai ia?niia?a:\n\
							{ff9300}\tAaaaeoa aic?ano io 18-oe ai 60-oe",
							"Aaeaa", "");
				return SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Aaaaeoa aic?ano io 18-oe ai 60-oe");
				}
	player_info[playerid][NAME] = strval(inputtext);
    new regmaleskins[9] [4] =
	{
				{19,21,22,28},// ?????????? 18-29
				{24,25,36,67},//?????????? 30-45
				{14,142,182,183},//?????????? 45-60
				{29,96,101,26},//? ?.?
				{2,37,72,202},
				{1,3,234,290},
				{23,60,170,180},
				{20,47,48,206},
				{44,58,132,229}
	};
	new regfemaleskins[9][2] = //?????????? ? ???????
	{
				{13,69},
				{9,190},
				{10,218},
				{41,56},
				{31,151},
				{39,89},
				{169,193},
				{207,225},
				{54,130}
	};
	new newskinindex;
	switch(player_info[playerid][RACE])
	{
		case 2: newskinindex+=3;
		case 3: newskinindex+=6;
	}
	switch(player_info[playerid][AGE])
	{
	case 30..45: newskinindex++;
	case 46..60: newskinindex+=2;
	}
	 player_info[playerid][SKIN] = (player_info[playerid][SEX] == 1) ? (regmaleskins[newskinindex][random(4)]) : (regmaleskins[newskinindex][random(2)]);
 	new Year, Month, Day;
	getdate(Year, Month, Day);
	new date[13];
	format(date, sizeof(date), "%02d.%02d.%d", Day, Month, Year);
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	static const fmt_query[] = "INSERT INTO `users` (`name`, `password`, `salt`, `email`, `ref`, `sex`, `race`, `age`, `skin`, `regdata`, `regip`) VALUES ('%e', '%e', '%e', '%e', '%d, '%d', '%d', '%d', '%d', '%e', '%e')";
	new query[sizeof(fmt_query)+(-2+MAX_PLAYER_NAME)+(-2+64)+(-2+10)+(-2+8)+(-2+1)+(-2+1)+(-2+2)+(-2+3)+(-2+12)+(-2+15)];
	mysql_format(dbHandle, query, sizeof(query), fmt_query, player_info[playerid][NAME], player_info[playerid][PASSWORD], player_info[playerid][SALT],  player_info[playerid][EMAIL], player_info[playerid][REF], player_info[playerid][SEX], player_info[playerid][RACE], player_info[playerid][AGE], player_info[playerid][SKIN], date, ip);
	mysql_query(dbHandle, query, false);
	static const fmt_query2[] =  "SELECT * FROM `users` WHERE `name` = '%s' AND `password` = '%s'";
	mysql_format(dbHandle, query, sizeof(query), fmt_query2, player_info[playerid][NAME], player_info[playerid][PASSWORD]);
	mysql_tquery(dbHandle, query, "PlayerLogin", "i", playerid);
			}
			case DLG_LOG:
   {
			if(response)
			{
					new checkpass[65];
					printf("%s\n%s", checkpass, player_info[playerid][SALT]);
					if(strcmp(player_info[playerid][PASSWORD], checkpass, false ,64) == 0)
					{   if(player_info[playerid][PIN][0] != 0)
						{
                            if(player_info[playerid][PIN][1] == 0)
                            {
                                new nowip[16], oldip[16];
                                GetPlayerIp(playerid, nowip, sizeof(nowip));
                                GetPlayerSubnet(nowip);
								strmid(oldip, player_info[playerid][LASTIP], 0, 16, 16);
								GetPlayerSubnet(oldip);
								if (strcmp(nowip, oldip, true) == 0)
								{
        							static const fmt_query[] =  "SELECT * FROM `users` WHERE `name` = '%e' AND `password` = '%e'";
			    					new query[sizeof(fmt_query)+(-2+MAX_PLAYER_NAME)+(-2+64)];
									mysql_format(dbHandle, query, sizeof(query), fmt_query, player_info[playerid][NAME], player_info[playerid][PASSWORD]);
									mysql_tquery(dbHandle, query, "PlayerLogin", "i", playerid);
								}
								else
								{
								
								}
								return 1;

						}
						else if(player_info[playerid][PIN][1] == 1)
						{


							return 1;
}
		}
					   static const fmt_query[] =  "SELECT * FROM `users` WHERE `name` = '%e' AND `password` = '%e'";
						new query[sizeof(fmt_query)+(-2+MAX_PLAYER_NAME)+(-2+64)];
						mysql_format(dbHandle, query, sizeof(query), fmt_query, player_info[playerid][NAME], player_info[playerid][PASSWORD]);
						mysql_tquery(dbHandle, query, "PlayerLogin", "i", playerid);
					}
					else
					{
						new string[87];
						SetPVarInt(playerid, "WrongPassword", GetPVarInt(playerid, "WrongPassword")-1);
						if(GetPVarInt(playerid, "WrongPassword") > 0)
						{
						format(string, sizeof(string), "[Ioeaea]{FFFFFFAu aaaee iaaa?iue ia?ieu io aeeaoioa.O aan inoaeinu %d iiiuoie aoiaa.", GetPVarInt(playerid, "WrongPassword"));
						SCM(playerid, COLOR_RED, string);
						}
					if(GetPVarInt(playerid, "WrongPassword") == 0)
					{
						SCM(playerid, COLOR_RED, "[Ioeaea]{FFFFFF}Au en?a?iaee eeieo iiiuoie aoiaa e auee ioee??aie io na?aa?a.");
						SPD(playerid, -1, 0, " ", " ", " ", " ");
						return Kick(playerid);
					}
					ShowLogin(playerid);
					}
					}
					else
					{
			        SCM(playerid, COLOR_RED, "Eniieucoeoa \"/q\", ?oiau iieeioou na?aa?");
					SPD(playerid, -1, 0, "", "", "", "");
					return Kick(playerid);
					}
			}
			
			case DLG_MAINMENU:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0:	ShowStats(playerid, 0);
						case 1: SPD(playerid, DLG_SECURESETTINGS, DIALOG_STYLE_LIST,"{ff9300}Íàñòðîéêè áåçîïàñíîñòè",  "Èçìåíèòü ïàðîëü\nÃðàôè÷åñêèé PIN êîä", "Âûáðàòü", "Äàëåå");

					}
				}

			}

        case DLG_STAT:
		{
				if(response) callcmd::menu(playerid);
		}

		case DLG_SECURESETTINGS:
			{
			if (response)
			{
				switch(listitem)
				{
					case 0: SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}Èçìåíåíèå ïàðîëÿ{FFFFFF} Øàã ïåðâûé", "{FFFFFF}Ââåäèòå âàø òåêóùèé ïàðîëü â ïîëå íèæå:", "Äàëåå", "Çàêðûòü");
                    case 1:
					{
						new dialog[81];
						format(dialog, sizeof(dialog),
						"Óñòàíîâèèòü PIN êîä\n\
						Óäàëèòü PIN êîä\n\
						Ñïðàøèâàòü PIN êîä %s",
						(player_info[playerid][PIN][1] == 0) ? ("{32CD32}[??? ????? IP]"): ("{0089ff}[Âñåãäà]"));
				SPD(playerid, DLG_SECRETPINCONTROL, DIALOG_STYLE_LIST, "{ff9300}Óïðàâèëåíèå ãðàôè÷åñêèì PIN êîäîì ", "Óñòàíîâèòü ïàðîëü\nÓäàëèòü PIN êîä", "Âûáðàòü", "Çàêðûòü");
				}
			}
			}
			else callcmd::menu(playerid);
		   }
		   case DLG_NEWPASS1:
  {
					if(!strlen(inputtext)) return SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}????????? ??????{FFFFFF}??? ??????", "{FFFFFF}??????? ??? ??????? ?????? ? ???? ????:", "?????", "???????");
					new checkpass[65];
					if(!strcmp(player_info[playerid] [PASSWORD], checkpass, false , 64) == 0)
					{
						 SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}????????? ??????{FFFFFF}??? ??????", "{FFFFFF}??????? ??? ??????? ?????? ? ???? ????:", "?????????", "???????");
					}
					else
					{
						SCM(playerid, COLOR_RED,"[??????]{FFFFFF}?? ????? ???????? ?????? ?? ????????");
						return SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}????????? ??????{FFFFFF}??? ??????", "{FFFFFF}??????? ??? ??????? ?????? ? ???? ????:", "?????", "???????");
					}
		}
		case DLG_NEWPASS2:
		{
		if(!strlen(inputtext)) return SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}????????? ??????{FFFFFF} ???? ??????", "{FFFFFF}??????? ??? ????? ?????? ? ???? ????:", "?????????", "???????");
		if(!(8 <= strlen(inputtext) <= 32))
				{
					SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}????????? ??????{FFFFFF} ???? ??????", "{FFFFFF}??????? ??? ????? ?????? ? ???? ????:", "?????????", "???????");
					return SCM(playerid,  COLOR_RED, "[??????] {FFFFFF}????? ?????? ?????? ???? ?? 8-?? ?? 32-??  ????????");
				}
		new regex:rg_passwordcheck = regex_new("^[a-z-Z0-9 {1,}]$");
		if(regex_check(inputtext, rg_passwordcheck))
				{
					new salt[11];
					for(new i; i < 10; i++)
							{
								salt[i] = random(79) + 48;
							}
								salt[10] = 0;
						strmid(player_info[playerid][SALT], salt, 0, 11, 11);
						new string[51+(-2+32)];
						format(string, sizeof(string), "[???????????]{FFFFFF}??? ????? ??????: {0089ff}%s", inputtext);
						SCM(playerid, COLOR_NOTIFICATION, string);
						SCM(playerid, COLOR_NOTIFICATION, "[???????????]{FFFFFF}???????? ???????? ???????{0089ff}F8{FFFFFF}??? ???????? ????? ??????");
						static const fmt_query[] = "UPDATE `users` SET `password` = '%e' `salt` WHERE `id` = '%d'";
						new query[sizeof(fmt_query)+(-2+64)+(-2+10)+(-2+8)];
						mysql_format(dbHandle,query, sizeof(query), fmt_query, player_info[playerid][PASSWORD], player_info[playerid][SALT], player_info[playerid][ID]);
						mysql_tquery(dbHandle, query);
				}
				else
				{

				SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}????????? ??????{FFFFFF}??? ??????", "{FFFFFF}??????? ??? ????? ?????? ? ???? ????:", "?????????", "????????");
				regex_delete(rg_passwordcheck);
				return SCM(playerid,  COLOR_RED, "[??????] {FFFFFF}?????? ????? ???????? ?????? ?? ????? ? ????????? ???????? ?????? ????????");
				}
					regex_delete(rg_passwordcheck);
		}
		case DLG_SECRETPINCONTROL:
		{
			if(response)
			{
			    switch(listitem)
			    {
           case 0:
					{
						if(player_info[playerid][PIN] != 0)
						{
						new dialog[81];
						format(dialog, sizeof(dialog),
						"Óñòàíîâèòü PIN êîä\n\
						Óäàëèòü PIN êîä\n\
						Ñïðàøèâàòü PIN êîä %s",
						(player_info[playerid][PIN][1] == 0) ? ("{32CD32}[Ïðè ñìåíå IP]"): ("{0089ff}[Âñåãäà]"));
						SPD(playerid, DLG_SECRETPINCONTROL, DIALOG_STYLE_LIST, "{ff9300}Óïðàâèëåíèå ãðàôè÷åñêèì PIN êîäîì ", "Óñòàíîâèòü ïàðîëü\nÓäàëèòü PIN êîä", "Âûáðàòü", "Çàêðûòü");
						return SCMError(playerid, "[ÎØÈÁÊÀ] {FFFFFF}Ó âàñ óæå óñòàíîâëåí ãðàôè÷åñêèé PIN êîä");
						}
						SPD(playerid, DLG_SECRETPINSET, DIALOG_STYLE_INPUT, "{ff9300}Óñòàíîâêà ãðàôè÷åñêîãî PIN êîäà{FFFFFF}", "{FFFFFF}Ââåäèòå âàø áóäóùèé ãðàôè÷åñêèé PIN êîä â ïîëå íèæå:\n\n Ïðèìå÷àíèå: PIN êîä äîëæåí áûòü 4-åõ çíà÷íûì è íå íà÷èíàòüñÿ íà 0", "Ñîõðàíèòü", "Çàêðûòü");
						}
						case 2:
						{
						if(player_info[playerid][PIN][0] == 0)
						{
						new dialog[81];
						format(dialog, sizeof(dialog),
						"Óñòàíîâèòü PIN êîä\n\
						Óäàëèòü PIN êîä\n\
						Ñïðàøèâàòü PIN êîä %s",
						(player_info[playerid][PIN][1] == 0) ? ("{32CD32}[Ïðè ñìåíå IP]"): ("{0089ff}[Âñåãäà]"));
						}
						SPD(playerid, DLG_SECRETPINRESET, DIALOG_STYLE_INPUT, "{ff9300}Óäàëåíèå ãðàôè÷åñêîãî PIN êîäà{FFFFFF}", "{FFFFFF}Ââåäèòå âàø òåêóùèé  ãðàôè÷åñêèé PIN êîä â ïîëå íèæå:", "Óäàëèòü", "Çàêðûòü");
				}
				case 3:
				{

					if(player_info[playerid][PIN][1] == 0)
					{
						player_info[playerid][PIN][1] == 1;
						SCMNotification(playerid, "[Óâåäîìëåíèå] {FFFFFF}Âàø ãðàôè÷åñêèé PIN êîä ?????? ????? ??????????? ??? ?????? ?????");
					}

					else if(player_info[playerid][PIN][1] == 1)
					{
						player_info[playerid][PIN][1] == 0;
						SCMNotification(playerid, "[???????????] {FFFFFF}??? ??????????? PIN ??? ?????? ????? ??????????? ??? ?????? ????? IP");
					}
					static const fmt_query[] = "UPDATE `users` SET `pin` = '%d,%d' WHERE `id` = '%d'";
					new query[sizeof(fmt_query)+(-2+4)+(-2+1)+(-2+8)];
					format(query, sizeof(query), fmt_query, player_info[playerid][PIN][0], player_info[playerid][PIN][1], player_info[playerid][ID]);
					mysql_tquery(dbHandle, query);
					new dialog[81];
					format(dialog, sizeof(dialog),
					"?????????? PIN ???\n\
					??????? PIN ???\n\
					?????????? PIN ??? %s",
					(player_info[playerid][PIN][1] == 0) ? ("{32CD32}[??? ????? IP]"): ("{0089ff}[âñåãäà]"));
					SPD(playerid, DLG_SECRETPINCONTROL, DIALOG_STYLE_LIST, "{ff9300}??????????? ??????????? PIN ?????", "???????", "???????");
					}
   			}
		}
}
case DLG_SECRETPINSET:
		{
			if(!strlen(inputtext)) SPD(playerid, DLG_SECRETPINSET, DIALOG_STYLE_INPUT, "{ff9300}Óñòàíîâêà ãðàôè÷åñêîãî PIN êîäà{FFFFFF}", "{FFFFFF}Ââåäèòå âàø áóäóùèé ãðàôè÷åñêèé PIN êîä â ïîëå íèæå:\n\n Ïðèìå÷àíèå: PIN êîä äîëæåí áûòü 4-åõ çíà÷íûì è íå íà÷èíàòüñÿ íà 0", "Ñîõðàíèòü", "Çàêðûòü");
			new regex:rg_secretpincheck = regex_new("^[1-9]{1}{3}$");
			if(regex_check(inputtext, rg_secretpincheck))
			{
				player_info[playerid][PIN][0] = strval(inputtext);
				player_info[playerid][PIN][1] = 0;
				static const fmt_query[] = "UPDATE `users` SET `pin` = '%d,%d' WHERE `id` = '%d'";
				new query[sizeof(fmt_query)+(-2+4)+(-2+1)+(-2+8)];
				format(query, sizeof(query), fmt_query, player_info[playerid][PIN][0], player_info[playerid][PIN][1], player_info[playerid][ID]);
				mysql_tquery(dbHandle, query);
				new string[58+(-2+4)];
				format(string, sizeof(string), "[Óâåäîìëåíèå]{FFFFFF}Âàø ãðàôè÷åñêèé PIN êîä: {0089ff}%s", inputtext);
				SCM(playerid, COLOR_NOTIFICATION, string);
				SCM(playerid, COLOR_NOTIFICATION, "[Óâåäîìëåíèå]{FFFFFF} Ñäåëàéòå ñêðèíøîò êíîïêîé {0089ff}F8{}{FFFFFF}èëè çàïèøèòå íîâûé ãðàôè÷åñêèé PIN êîä");

			}
			else
			{
				SPD(playerid, DLG_NEWPASS1, DIALOG_STYLE_INPUT, "{ff9300}Óñòàíîâêà ãðàôè÷åñêîãî PIN êîäà{FFFFFF}", "{FFFFFF}Ââåäèòå âàø áóäóùèé ãðàôè÷åñêèé PIN êîä â ïîëå íèæå:\n\n Ïðèìå÷àíèå: PIN êîä äîëæåí áûòü 4-åõ çíà÷íûì è íå íà÷èíàòüñÿ íà 0", "Ñîõðàíèòü", "Çàêðûòü");
				regex_delete(rg_secretpincheck);
				return SCMError(playerid, "[Îøèáêà] {FFFFFF}Ââåäèòå êîððåêòíî PIN êîä");
			}
			regex_delete(rg_secretpincheck);
		}
    case DLG_SECRETPINRESET:
		{
			if(!strlen(inputtext)) SPD(playerid, DLG_SECRETPINSET, DIALOG_STYLE_INPUT, "{ff9300}???????? ???????????? PIN ????{FFFFFF}", "{FFFFFF}??????? ??? ???????  ??????????? PIN ??? ? ???? ????:", "???????", "???????");
			if(strval(inputtext) == player_info[playerid][PIN][0])
			{
				player_info[playerid][PIN][0] = 0;
				player_info[playerid][PIN][1] = 0;
				static const fmt_query[] = "UPDATE `users` SET `pin` = '%d,%d' WHERE `id` = '%d'";
				new query[sizeof(fmt_query)+(-2+4)+(-2+1)+(-2+8)];
				format(query, sizeof(query), fmt_query, player_info[playerid][PIN][0], player_info[playerid][PIN][1], player_info[playerid][ID]);
				mysql_tquery(dbHandle, query);
				SCMNotification(playerid, "[Óâåäîìëåíèå]{FFFFFF}Âàø ãðàôè÷åñêèé PIN êîä óäàëåí");
			}
			else
			{
				SPD(playerid, DLG_SECRETPINRESET, DIALOG_STYLE_INPUT, "{ff9300}???????? ???????????? PIN ????{FFFFFF}", "{FFFFFF}??????? ??? ???????  ??????????? PIN ??? ? ???? ????:", "???????", "???????");
				return SCMError(playerid, "[??????] {FFFFFF}????? ????????????? PIN ???");
			}
		}
		}
	return 1;
}

forward PlayerLogin(playerid);
public PlayerLogin (playerid)
	{
		new rows;
		cache_get_row_count(rows);
		if(rows)
			{
			cache_get_value_name_int(0, "id", player_info[playerid][ID]);
			cache_get_value_name(0, "email", player_info[playerid][EMAIL], 65);
			cache_get_value_name_int(0, "ref", player_info[playerid][REF]);
			cache_get_value_name_int(0, "sex", player_info[playerid][SEX]);
			cache_get_value_name_int(0, "race", player_info[playerid][RACE]);
			cache_get_value_name_int(0, "age", player_info[playerid][AGE]);
			cache_get_value_name_int(0, "skin", player_info[playerid][SKIN]);
			cache_get_value_name(0, "regdata", player_info[playerid][REGDATA], 13);
			cache_get_value_name(0, "regip", player_info[playerid][REGIP], 16);
			cache_get_value_name_int(0, "admin", player_info[playerid][ADMIN]);
			cache_get_value_name_int(0, "money", player_info[playerid][MONEY]);
			cache_get_value_name_int(0, "lvl", player_info[playerid][LVL]);
			cache_get_value_name_int(0, "exp", player_info[playerid][EXP]);
			cache_get_value_name_int(0, "mins", player_info[playerid][MINS]);
			cache_get_value_name_int(0, "lastip", player_info[playerid][LASTIP], 16);


   SetPVarInt(playerid, "logged", 1);
   SetSpawnInfo(playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    TogglePlayerSpectating(playerid, 0);
   }
   return 1;
 }


forward CheckReferal(playerid, referal[]);
public CheckReferal(playerid, referal[])
{
     new rows;
	 cache_get_row_count(rows);
	 if(rows)
 {

		 cache_get_value_name_int(0, "id", player_info[playerid][REF]);
		 SPD(playerid, DLG_REGSEX, DIALOG_STYLE_MSGBOX, "{ff9300}?aaeno?aoey{FFFFFF}•Auai? iiea ia?niia?a",
				"{FFFFFF}Auaa?eoa iie aaoaai ia?niia?a:",
				"Io?neie", "?aineee");
 }
	 else
	 {
			 SPD(playerid, DLG_REGREF, DIALOG_STYLE_INPUT, "{ff9300}?aaeno?aoey{FFFFFF}•Aaia i?eaeaneaoaai",
				"{FFFFFF}Anee ou caoae ia na?aa? ii i?eaeaoaie?, oi\n\
				  ii?aou oeacaou iee i?eaeaneaoaai a iiea ie?a:",
				"Aaeaa", "I?iionoeou");
				return SCM(playerid, COLOR_RED, "[Ioeaea] {FFFFFF}Aeeaoioa n oaeei ieeii ia nouanoaoao");
	 }
	 return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
SetPlayerPos(playerid, fX, fY, fZ);
return 1;
}

stock GiveMoney(playerid, money)
{
	player_info[playerid][MONEY] += money;

	GivePlayerMoney (playerid, money);
	static const fmt_query[] = "UPDATE `user` SET `money` = '%d' WHERE `id` = '%d'";
	new query[sizeof(fmt_query)+(-2+9)(-2+8)];
	format (query, sizeof(query), fmt_query, player_info[playerid][MONEY], playerid_info[playerid][ID]);
	mysql_query(dbHandle, query, false);

}

CMD:spawn(playerid)
{
	TogglePlayerSpectating(playerid, 0);
   SetPVarInt(playerid, "logged", 1);
   SetSpawnInfo(playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
   SpawnPlayer(playerid);
}

forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
            {
                GetPlayerPos(i, posx, posy, posz);
                                tempposx = (oldposx -posx);
                                tempposy = (oldposy -posy);
                                tempposz = (oldposz -posz);
                if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) // If the player is within 16 meters
                {
                    SendClientMessage(i, col1, string);
                }
                else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) // within 8 meters
                {
                    SendClientMessage(i, col2, string);
                }
                else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) //4 meters
                {
                    SendClientMessage(i, col3, string);
                }
                else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) //2 meters
                {
                    SendClientMessage(i, col4, string);
                }
                else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) //1 meter
                {
                    SendClientMessage(i, col5, string);
                }
            }
            else
            {
                SendClientMessage(i, col1, string);
            }
        }
    }
    return 1;
}

stock GiveExp(playerid, exp)
{
        player_info[playerid][EXP] += exp;
        new needexp = (player_info[playerid][LVL]+1)*expmultiply;
        new buffer = player_info[playerid][EXP]-needexp;
        if(player_info[playerid][EXP] >= needexp)
        {
            player_info[playerid][EXP] = 0;
            if(buffer > 0) player_info[playerid][EXP]+=buffer;
            player_info[playerid][LVL]++;
            SCM(playerid, COLOR_WHITE, "Aao o?iaaiu iiauoai");
            SetPlayerScore(playerid, player_info[playerid][LVL]);
        }
        static const fmt_query[] = "UPDATE `accounts` SET `level` = '%d', `exp` = '%d' WHERE `id` = '%d'";
        new query[sizeof(fmt_query)+(-2+9)+(-2+8)];
        format(query, sizeof(query), fmt_query, player_info[playerid][LVL], player_info[playerid][EXP], player_info[playerid][ID]);
        mysql_query(dbHandle, query, false);
}

stock ShowStats(playerid, checkadm)
{
	new needexp = (player_info[playerid][LVL]+1)*expmultiply;
	new dialog[256];
	format(dialog, sizeof(dialog),
	"{FFFFFF}Iee:\t{0089ff}%s\n\
	{FFFFFF}Iie:\t{0089ff}%s\n\
	{FFFFFF}?ana:\t{0089ff}%s\n\
	{FFFFFF}Aic?ano:\t{0089ff}%d eao/aia\n\
	{FFFFFF}O?iaaiu:\t{0089ff}%d\n\
	{FFFFFF}Iiuo:\t\t{0089ff}%d/%d\n",
	player_info[playerid][NAME],
	(player_info[playerid][SEX] == 1) ? ("???????") : ("???????"),
	PlayerRaces[player_info[playerid][RACE]-1],
	player_info[playerid][AGE],
	player_info[playerid][LVL],
	player_info[playerid][EXP], needexp
	);
	if(checkadm == 0) SPD(playerid, DLG_STAT, DIALOG_STYLE_MSGBOX, !"{ff9300}?????????? ?????????", dialog, !"?????", !"???????");
	else SPD(playerid, DLG_NONE, DIALOG_STYLE_MSGBOX, !"{ff9300}?????????? ?????????", dialog, !"???????", "");
}

stock GetPlayerSubnet(buffer[])
{
    for(new i=0,dots=0; ; ++i)
        switch(buffer[i])
        {
            case '\0':
                break;
            case '.':
                if(++dots == 2)
                {
                    buffer[i] = '\0';
                    break;
                }
        }
}

CMD:me(playerid, params[])
{
if(sscanf(params, "s[116]", params[0])) return SCM(playerid, COLOR_GRAY, "Eniieucoeoa /me [oaeon]");
new string[144];
format(string, sizeof(string), "%s %s", player_info[playerid][NAME], params[0]);
ProxDetector(20.0, playerid, string, 0x00F76193, 0x00F76193, 0x00F76193, 0x00F76193, 0x00F76193);
SetPlayerChatBubble(playerid, params[0], 0x00F76193, 20, 7500);
return 1;
}

CMD:do(playerid, params[])
{
if(sscanf(params, "s[116]", params[0])) return SCM(playerid, COLOR_GRAY, "Eniieucoeoa /do [oaeno]");
new string[144];
format(string, sizeof(string), "%s (%s)", params[0], player_info[playerid][NAME]);
ProxDetector(20.0, playerid, string, 0x00F76193, 0x00F76193, 0x00F76193, 0x00F76193, 0x00F76193);
SetPlayerChatBubble(playerid, params[0], 0x00F76193, 20, 7500);
return 1;
}

CMD:try(playerid, params[])
{
if(sscanf(params, "s[99]", params[0])) return SCM(playerid, COLOR_GRAY, "Eniieucoeoa /try [oaeno]");
new string[144];
format(string, sizeof(string), "%s %s | %s", player_info[playerid][NAME], params[0], (!random(2)) ? ("{FF0000}Iaoaa?ii") : ("{32CD32}Oaa?ii"));
ProxDetector(20.0, playerid, string, 0xDE92FFFF, 0xDE92FFFF, 0xDE92FFFF, 0xDE92FFFF, 0xDE92FFFF);
return 1;
}

CMD:todo(playerid, params[])
{
if(strlen(params) > 95) return SCM(playerid, COLOR_GRAY, !"Neeoeii aeeiiue oaeno e aaenoaea");
new message[48], action[49];
if(sscanf(params, "p<*>s[47]s[48]", message, action)) return SCM(playerid, COLOR_GRAY, !"Eniieucoeoa /todo [oaeno*aaenoaea]");
if(strlen(message) < 2 || strlen(action) < 2) return SCM(playerid, COLOR_GRAY, !"Eniieucoeoa /todo [oaeno*aaenoaea]");
new string[144];
format(string, sizeof(string), "- '%s' - {DE92FF}neacae%s %s, %s", message, (player_info[playerid][SEX] == 1) ? ("") : ("a"), player_info[playerid][NAME], action);
ProxDetector(20.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
return 1;
}

CMD:n(playerid, params[])
{
if(sscanf(params, "s[107]", params[0])) return SCM(playerid, COLOR_GRAY, "Eniieucoeoa /n [niiauaiea]");
new string[144];
format(string, sizeof(string), "(( %s[%d]: %s ))", player_info[playerid][NAME], playerid, params[0]);
ProxDetector(20.0, playerid, string, 0xCCCC99FF, 0xCCCC99FF, 0xCCCC99FF, 0xCCCC99FF, 0xCCCC99FF);
return 1;
}

CMD:s(playerid, params[])
{
if(sscanf(params, "s[105]", params[0])) return SCM(playerid, COLOR_GRAY, "Eniieucoeoa /s [oaeno]");
new string[144];
format(string, sizeof(string), "%s[%d] e?eeioe: %s", player_info[playerid][NAME], playerid, params[0]);
ProxDetector(30.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
{
ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.1,0,0,0,0,0);
}
SetPlayerChatBubble(playerid, params[0], COLOR_WHITE, 25, 7500);
return 1;
}

CMD:menu(playerid, params[])
{
	SPD(playerid, DLG_MAINMENU, DIALOG_STYLE_LIST, "{ff9300}Aeaaiia iai?",
	"[{0089ff}1]{FFFFFF} Noaoenoeea\n\
	[{0089ff}2]{FFFFFF} Iano?ieee aaciianiinoe",
	"Aua?aou", "Cae?uou");

	return 1;
}
alias:menu("mn", "nm");
